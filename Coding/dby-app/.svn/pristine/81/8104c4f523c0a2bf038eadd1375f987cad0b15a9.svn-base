package com.yd.dby.app.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.yd.dby.app.common.HttpCode;
import com.yd.dby.app.common.ServiceResult;
import com.yd.dby.app.entity.YdMessage;
import com.yd.dby.app.entity.YdMessageCtc;
import com.yd.dby.app.entity.YdUser;
import com.yd.dby.app.entity.para.CtcMessagePara;
import com.yd.dby.app.mapper.YdMessageCtcMapper;
import com.yd.dby.app.mapper.YdMessageMapper;
import com.yd.dby.app.mapper.YdUserMapper;
import com.yd.dby.app.service.YdMessageService;

@Service("ydMessageService")
public class YdMessageServiceImpl implements YdMessageService {

	@Autowired
	private YdMessageMapper ydMessageMapper;

	@Autowired
	private YdUserMapper ydUserMapper;

	@Autowired
	private YdMessageCtcMapper ydMessageCtcMapper;

	@Override
	public ServiceResult<Object> insertUserLeaveMessage(CtcMessagePara para, YdUser user) {
		ServiceResult<Object> result = new ServiceResult<>();

		// 根据当前用户ID查询该用户的信息
		YdUser ydUser = ydUserMapper.selectByPrimaryKey(user.getUserId());
		if (null == ydUser) {
			result.setMsg("用户身份异常!");
			result.setStatusCode(HttpCode.FORBIDDEN);
			return result;
		}

		// 插入商品信息到message_ctc表,创建商品对象
		YdMessageCtc ydMessageCtc = new YdMessageCtc();
		ydMessageCtc.setMessaeCtcId(null);// 防止恶意传参
		ydMessageCtc.setCtcId(para.getCtcId());
		ydMessageCtc.setCtcImg(para.getCtcImg());
		ydMessageCtc.setCtcName(para.getCtcName());
		ydMessageCtc.setCtcPrice(para.getCtcPrice());
		ydMessageCtc.setCtcSummary(para.getCtcSummary());
		int ydMessageCtcInfo = ydMessageCtcMapper.insertSelective(ydMessageCtc);// 插入成功后需要返回一个messageCtcId作为消息的一个外键关联

		// 插入留言内容到message表,创建message对象
		YdMessage ydMessage = new YdMessage();
		ydMessage.setMessageId(null);
		ydMessage.setMessageObjId(ydMessageCtc.getMessaeCtcId());// 生成的商品信息外键
		ydMessage.setMessageState(1);// 未读
		ydMessage.setMessageType(2);// 懒鱼
		ydMessage.setMessageAuthorId(ydUser.getUserId());
		ydMessage.setMessageAuthorImg(ydUser.getUserAvatar());
		ydMessage.setMessageAuthorName(ydUser.getUserNickname());
		ydMessage.setMessageContent(para.getMessageContent());
		ydMessage.setMessageFartherId(0);
		ydMessage.setMessageReceiveId(para.getMessageReceiveId());
		ydMessage.setMessageReceiveImg(para.getMessageReceiveImg());
		ydMessage.setMessageReceiveName(para.getMessageReceiveName());
		ydMessage.setCreateDate(Long.valueOf(System.currentTimeMillis()).toString());
		int ydMessageInfo = ydMessageMapper.insertSelective(ydMessage);

		if (ydMessageCtcInfo == 1 && ydMessageInfo == 1) {
			result.setMsg("留言成功!");
			result.setStatusCode(HttpCode.OK);
		} else {
			result.setMsg("留言失败!");
			result.setStatusCode(HttpCode.INTERNAL_SERVER_ERROR);
		}

		return result;
	}

}
