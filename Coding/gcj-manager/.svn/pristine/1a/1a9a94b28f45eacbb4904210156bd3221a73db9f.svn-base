package com.yd.gcj.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.yd.gcj.entity.YdMangerTaskPM;
import com.yd.gcj.entity.vo.YdMangerUserVo;
import com.yd.gcj.mapper.YdMangerMapperTaskPM;
import com.yd.gcj.mapper.YdMangerMapperUser;
import com.yd.gcj.service.YdMangerServiceTaskPM;
import com.yd.gcj.tool.MapInitFactory;
import com.yd.gcj.tool.Values;

@Service("YdMangerServiceTaskPM")
public class YdMangerServiceImplTaskPM implements YdMangerServiceTaskPM {

	@Autowired
	private YdMangerMapperTaskPM ydMangerMapperTaskPM;
	
	@Autowired
	private YdMangerMapperUser mapperUser;
	
	@Override
	public List<YdMangerTaskPM> $queryByTid(Integer taskId) {
		List<YdMangerTaskPM> taskPMs = ydMangerMapperTaskPM.$queryByTid(taskId);
		int i = taskPMs.size();
		if (i > 0) {
			taskPMs.get(0).setTpm_isbalance(1);
		}
		return taskPMs;
	}

	@Override
	public YdMangerTaskPM $queryById(Integer tpm_id) {
		return ydMangerMapperTaskPM.$queryById(tpm_id);
	}

	@Override
	public Object $insert(YdMangerTaskPM tpm) {
		MapInitFactory mapInitFactory = new MapInitFactory();
		Date date = new Date();
		tpm.setTpm_create_time(date);
		tpm.setTpm_update_time(date);
		tpm.setTpm_isbalance(0);
		tpm.setTpm_state(0);
		int success = ydMangerMapperTaskPM.$insert(tpm);
		if (success > 0) {
			mapInitFactory.put("tpmId", tpm.getTpm_id());
			mapInitFactory.setMsg(Values.INITSUCCESSCODE, "添加成功！");
		} else {
			mapInitFactory.setMsg("501", "添加失败，请检查后再试！");
		}
		return mapInitFactory.getMap();
	}

	@Override
	public Integer $update(YdMangerTaskPM tpm) {
		return ydMangerMapperTaskPM.$update(tpm);
	}

	@Override
	public Object $updateState(Integer tpmId, Integer tpmState) {
		MapInitFactory mapInitFactory = new MapInitFactory();
		try {
			Date date = new Date();
			Integer success = ydMangerMapperTaskPM.$upateState(tpmId, tpmState, date);
			if (success > 0) {
				mapInitFactory.setMsg("200", "申请提交成功！");
			} else {
				mapInitFactory.setMsg("501", "申请提交失败，请检查后再试！");
			}
		} catch (Exception e) {
			mapInitFactory.setSystemError();
			e.printStackTrace();
		}
		return mapInitFactory.getMap();
	}

	@Override
	public Object $delete(Integer tpm_id) {
		MapInitFactory mapInitFactory = new MapInitFactory();
		try {
			Integer success = ydMangerMapperTaskPM.$delete(tpm_id);
			if (success > 0) {
				mapInitFactory.setMsg("200", "删除成功！");
			} else {
				mapInitFactory.setMsg("501", "删除失败！");
			}
		} catch (Exception e) {
			mapInitFactory.setSystemError();
		}
		return mapInitFactory.getMap();
	}

	@Override
	public Object tg(final YdMangerUserVo userVo, Integer taskId, String desc, float price, String phone,String payPwd, float priceNow) {
		MapInitFactory mf = new MapInitFactory();
		
		Date date = new Date();
		
		//获取用户支付密码
		String dbPayPwd = mapperUser.$queryPayPwdByUserPhoneAndUserId(userVo.getUser_id(), phone);
		
		//密码对比
		
		//查看用户余额
		//对比用户余额
		//修改用户余额
		
		YdMangerTaskPM taskPM = new YdMangerTaskPM();
		taskPM.setTpm_desc(desc);
		taskPM.setTpm_money(price);
		taskPM.setTpm_taskid(taskId);
		taskPM.setTpm_state(1);
		taskPM.setTpm_isbalance(0);
		taskPM.setTpm_create_time(date);
		taskPM.setTpm_update_time(date);
		ydMangerMapperTaskPM.$insert(taskPM);
		return null;
	}

}
