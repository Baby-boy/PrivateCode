package com.lingang.core.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.lingang.api.domain.basic.Page;
import com.lingang.api.domain.basic.ServiceResult;
import com.lingang.api.domain.basic.StateCodeConstant;
import com.lingang.api.domain.entity.SysCollect;
import com.lingang.api.domain.entity.SysImages;
import com.lingang.api.domain.entity.SysPartner;
import com.lingang.api.domain.entity.SysPartnerType;
import com.lingang.api.domain.entity.SysTop;
import com.lingang.api.domain.para.SysPartnerPara;
import com.lingang.api.domain.pfvo.SysPartnerPfVo;
import com.lingang.api.domain.vo.SysNewAddMonthStatisticsVo;
import com.lingang.api.domain.vo.SysNewAddQuarterStatisticsVo;
import com.lingang.api.domain.vo.SysNewAddStatisticsVo;
import com.lingang.api.domain.vo.SysPartnerBasicsStatisticsVo;
import com.lingang.api.domain.vo.SysPartnerTypeStatisticsVo;
import com.lingang.api.domain.vo.SysPartnerVo;
import com.lingang.api.service.SysPartnerService;
import com.lingang.core.persistence.reader.SysCollectReaderMapper;
import com.lingang.core.persistence.reader.SysFileReaderMapper;
import com.lingang.core.persistence.reader.SysImagesReaderMapper;
import com.lingang.core.persistence.reader.SysPartnerReaderMapper;
import com.lingang.core.persistence.reader.SysPartnerTypeReaderMapper;
import com.lingang.core.persistence.writer.SysImagesWriterMapper;
import com.lingang.core.persistence.writer.SysPartnerWriterMapper;
import com.lingang.core.persistence.writer.SysTopWriterMapper;

@Service("sysPartnerService")
public class SysPartnerServiceImpl implements SysPartnerService {

	@Resource
	private SysPartnerReaderMapper sysPartnerReaderMapper;

	@Resource
	private SysPartnerWriterMapper sysPartnerWriterMapper;

	@Resource
	private SysFileReaderMapper sysFileReaderMapper;

	@Resource
	private SysPartnerTypeReaderMapper sysPartnerTypeReaderMapper;

	@Resource
	private SysImagesReaderMapper sysImagesReaderMapper;

	@Resource
	private SysImagesWriterMapper sysImagesWriterMapper;
	
	@Resource
	private SysCollectReaderMapper sysCollectReaderMapper; 
	@Resource
	private SysTopWriterMapper sysTopWriterMapper;

	@Override
	public ServiceResult<Page<SysPartnerVo>> selectPartnerPageList(Integer pageIndex, Integer pageSize) {
		ServiceResult<Page<SysPartnerVo>> result = new ServiceResult<Page<SysPartnerVo>>();
		// 查询条件
		Map<String, Object> map = new HashMap<String, Object>();
		int countRecord = sysPartnerReaderMapper.selectPartnerCount(map);
		Page<SysPartnerVo> page = new Page<>(pageIndex, countRecord, pageSize);
		if (countRecord > 0) {
			map.put("startIndex", page.getCurrentPage() - 1);
			map.put("onePageCount", pageSize);
			List<SysPartnerVo> list = sysPartnerReaderMapper.selectPartnerPageList(map);
			page.setList(list);
		}
		// 返回信息
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		result.setData(page);
		return result;
	}

	@Override
	public ServiceResult<SysPartnerVo> selectPartnerVoByPartnerId(Integer partnerId) {
		ServiceResult<SysPartnerVo> result = new ServiceResult<SysPartnerVo>();
		SysPartnerVo partnerVo = sysPartnerReaderMapper.selectPartnerVoByPartnerId(partnerId);
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		result.setData(partnerVo);
		return result;
	}

	@Override
	public ServiceResult<Page<SysPartnerPfVo>> selectSysPartnerPfVoPageList(SysPartnerPara para) {
		ServiceResult<Page<SysPartnerPfVo>> result = new ServiceResult<>();
		// 查询条件
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("partnerNameKeywords", para.getPartnerNameKeywords());
		map.put("partnerState", para.getPartnerState());
		int countRecord = sysPartnerReaderMapper.selectSysPartnerPfVoCount(map);
		Page<SysPartnerPfVo> page = new Page<>(para.getCurrentPage(), countRecord, para.getOnePageCount());
		if (countRecord > 0) {
			// 分页条件
			map.put("startIndex", page.getCurrentPage() - 1);
			map.put("onePageCount", page.getOnePageCount());
			List<SysPartnerPfVo> list = sysPartnerReaderMapper.selectSysPartnerPfVoPageList(map);
			page.setList(list);
		}
		result.setData(page);
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		return result;
	}

	/****** 后台 ******/
    /**
     * 合作伙伴置顶
     */
	@Override
	public ServiceResult<Page<SysPartnerPfVo>> queryAllByPage(HashMap<String, Object> map) {
		ServiceResult<Page<SysPartnerPfVo>> result = new ServiceResult<>();
		Integer pageIndex = (Integer) map.get("currentPage");
		Integer pageSize = (Integer) map.get("onePageCount");
		//获取置顶的合作伙伴的总条数
		Integer countRecord = sysPartnerReaderMapper.querySysPartnerPfVoCount(map);
		Page<SysPartnerPfVo> page = new Page<>(pageIndex, countRecord, pageSize);
		if (countRecord > 0) {
			// 分页条件
			map.put("startIndex", page.getCurrentPage() - 1);
			map.put("onePageCount", page.getOnePageCount());
			//分页查询置顶的合作伙伴的信息
			List<SysPartnerPfVo> list = sysPartnerReaderMapper.queryAllByTop(map);
			page.setList(list);
		}
		result.setData(page);
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		return result;
	}

	@Override
	public SysPartner selectByPrimaryKey(Integer partnerId) {

		return sysPartnerReaderMapper.selectByPrimaryKey(partnerId);
	}

	@Override
	public int deleteByPrimaryKey(Integer partnerId) {

		return sysPartnerWriterMapper.deleteByPrimaryKey(partnerId);
	}

	@Override
	public int insert(SysPartner record) {

		return sysPartnerWriterMapper.insert(record);
	}

	@Override
	public int insertSelective(SysPartner record) {

		return sysPartnerWriterMapper.insertSelective(record);
	}

	@Override
	public int updateByPrimaryKeySelective(SysPartner record) {

		return sysPartnerWriterMapper.updateByPrimaryKeySelective(record);
	}

	@Override
	public int updateByPrimaryKeyWithBLOBs(SysPartner record) {

		return sysPartnerWriterMapper.updateByPrimaryKeyWithBLOBs(record);
	}

	@Override
	public int updateByPrimaryKey(SysPartner record) {

		return sysPartnerWriterMapper.updateByPrimaryKey(record);
	}

	@Override
	public ServiceResult<Object> updatePartnerDetails(SysPartner partner) {
		ServiceResult<Object> result = new ServiceResult<>();
		int info = sysPartnerWriterMapper.updateByPrimaryKeySelective(partner);

		if (partner.getLogoImgId() != null) {
			SysImages maxImg = sysImagesReaderMapper.selectByPrimaryKey(partner.getLogoImgId());
			if (maxImg.getImgState() != 1) {
				maxImg.setImgState(1);
				sysImagesWriterMapper.updateByPrimaryKeySelective(maxImg);
			}
		}
		if (partner.getImgId() != null) {
			SysImages minImg = sysImagesReaderMapper.selectByPrimaryKey(partner.getImgId());
			if (minImg.getImgState() != 1) {
				minImg.setImgState(1);
				sysImagesWriterMapper.updateByPrimaryKeySelective(minImg);
			}
		}
		if (info == 1) {
			result.setStateCode(StateCodeConstant.SUCCESS_CODE);
			result.setMessage("修改成功!");
		} else {
			result.setStateCode(StateCodeConstant.ERROR_CODE);
			result.setMessage("修改失败!");
		}
		return result;
	}

	@Override
	public ServiceResult<Object> addPartnerDetails(SysPartner partner) {
		ServiceResult<Object> result = new ServiceResult<>();
		int info = sysPartnerWriterMapper.insertSelective(partner);
		if (info == 1) {
			result.setStateCode(StateCodeConstant.SUCCESS_CODE);
			result.setMessage("添加成功!");

			if (partner.getLogoImgId() != null) {
				SysImages maxImg = new SysImages();
				maxImg.setImgId(partner.getLogoImgId());
				maxImg.setObjId(partner.getPartnerId());
				maxImg.setImgState(1);
				sysImagesWriterMapper.updateByPrimaryKeySelective(maxImg);
			}
			if (partner.getImgId() != null) {
				SysImages minImg = new SysImages();
				minImg.setImgId(partner.getImgId());
				minImg.setObjId(partner.getPartnerId());
				minImg.setImgState(1);
				sysImagesWriterMapper.updateByPrimaryKeySelective(minImg);
			}
		} else {
			result.setStateCode(StateCodeConstant.ERROR_CODE);
			result.setMessage("添加失败!");
		}
		return result;
	}
	
	/**
	 * 添加最新合作
	 */
	@Override
	public ServiceResult<Object> addTopPartnerDetails(SysPartner partner) {
		ServiceResult<Object> result = new ServiceResult<>();
		int info = sysPartnerWriterMapper.insertSelective(partner);
		int num=partner.getPartnerId();
		if (info == 1) {
			//添加置顶表
			SysTop top=new SysTop();
			top.setTopId(null);
			Date date=new Date();
			SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd");
			String stringDate=format.format(date);
			Date parseDate;
			try {
				parseDate=format.parse(stringDate);
				top.setCreateTime(parseDate);
			} catch (Exception e) {
				e.printStackTrace();
			}
			top.setTopType(2);
			top.setObjId(num);
			int n=sysTopWriterMapper.insertSelective(top);
			if(n>0){
				result.setStateCode(StateCodeConstant.SUCCESS_CODE);
				result.setMessage("添加成功!");
			};
			if (partner.getLogoImgId() != null) {
				SysImages maxImg = new SysImages();
				maxImg.setImgId(partner.getLogoImgId());
				maxImg.setObjId(partner.getPartnerId());
				maxImg.setImgState(1);
				sysImagesWriterMapper.updateByPrimaryKeySelective(maxImg);
			}
			if (partner.getImgId() != null) {
				SysImages minImg = new SysImages();
				minImg.setImgId(partner.getImgId());
				minImg.setObjId(partner.getPartnerId());
				minImg.setImgState(1);
				sysImagesWriterMapper.updateByPrimaryKeySelective(minImg);
			}
		} else {
			result.setStateCode(StateCodeConstant.ERROR_CODE);
			result.setMessage("添加失败!");
		}
		return result;
	}

	@Override
	public ServiceResult<List<SysPartnerTypeStatisticsVo>> selectPartnerType() {
		ServiceResult<List<SysPartnerTypeStatisticsVo>> result = new ServiceResult<>();
		List<SysPartnerTypeStatisticsVo> sysPartnerTypeList = sysPartnerTypeReaderMapper.selectPartnerType();
		result.setData(sysPartnerTypeList);
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		return result;
	}

	@Override
	public ServiceResult<List<SysPartnerBasicsStatisticsVo>> selectPartnerLevel() {
		ServiceResult<List<SysPartnerBasicsStatisticsVo>> result = new ServiceResult<>();
		List<SysPartnerBasicsStatisticsVo> sysPartnerTypeList = sysPartnerReaderMapper.selectPartnerLevel();
		result.setData(sysPartnerTypeList);
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		return result;
	}

	@Override
	public ServiceResult<List<SysNewAddStatisticsVo>> selectNewCounts() {
		ServiceResult<List<SysNewAddStatisticsVo>> result = new ServiceResult<List<SysNewAddStatisticsVo>>();
		List<SysNewAddStatisticsVo> newAddStatisticsVoList = new ArrayList<SysNewAddStatisticsVo>();
		List<SysNewAddMonthStatisticsVo> monthList = sysPartnerReaderMapper.selectNewAddMonth();
		List<SysNewAddQuarterStatisticsVo> quarterList = sysPartnerReaderMapper.selectNewAddQuarter();
		Map<String, Object> currentMap = new HashMap<String, Object>();
		String currentMonth = "";
		String currentQuarter = "";
		if (monthList != null && monthList.size() > 0) { // 当按月查询有数据时，按季度也有数据
			SysNewAddStatisticsVo sysPartnerNewAddStatisticsVo = new SysNewAddStatisticsVo();
			sysPartnerNewAddStatisticsVo.setMonthList(monthList);
			sysPartnerNewAddStatisticsVo.setQuarterList(quarterList);
			newAddStatisticsVoList.add(sysPartnerNewAddStatisticsVo);

			// 遍历 月、季度数据，提取出当前月。季度
			for (SysNewAddMonthStatisticsVo sysNewAddMonthStatisticsVo : monthList) {
				Calendar a = Calendar.getInstance();
				if ((a.get(Calendar.YEAR) + "").equals(sysNewAddMonthStatisticsVo.getCreateYear())
						&& (a.get(Calendar.MONTH) + 1 + "").equals(sysNewAddMonthStatisticsVo.getCreateMonth())) {
					currentMonth = sysNewAddMonthStatisticsVo.getCreateMonth();
				}
			}
			for (SysNewAddQuarterStatisticsVo sysNewAddQuarterStatisticsVo : quarterList) {
				Calendar a = Calendar.getInstance();
				if ((a.get(Calendar.YEAR) + "").equals(sysNewAddQuarterStatisticsVo.getCreateYear())
						&& ((a.get(Calendar.MONTH)) / 3 + 1 + "")
								.equals(sysNewAddQuarterStatisticsVo.getCreateQuarter())) {
					currentQuarter = sysNewAddQuarterStatisticsVo.getCreateQuarter();
				}
			}

		}
		currentMap.put("currentMonth", currentMonth);
		currentMap.put("currentQuarter", currentQuarter);
		currentMap.put("maxMonth", sysPartnerReaderMapper.selectNewAddMonthMax());
		currentMap.put("maxQuarter", sysPartnerReaderMapper.selectNewAddQuarterMax());
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		result.setData(newAddStatisticsVoList);
		result.setDataMap(currentMap);
		return result;
	}

	@Override
	public ServiceResult<List<SysPartnerType>> selectSysPartnerType() {
		ServiceResult<List<SysPartnerType>> result = new ServiceResult<>();
		List<SysPartnerType> list = sysPartnerTypeReaderMapper.selectSysPartnerType();
		if (null != list) {
			result.setData(list);
		}
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		return result;
	}

	@Override
	public SysCollect selectSysCollect(Integer userId, Integer partnerId, Integer collectType) {
		return sysCollectReaderMapper.selectByUserIdAndCollectTypeAndObjId(userId, collectType, partnerId); 
	}

}
