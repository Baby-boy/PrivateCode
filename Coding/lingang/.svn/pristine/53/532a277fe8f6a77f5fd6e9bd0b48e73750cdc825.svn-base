package com.lingang.core.service.impl;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.springframework.stereotype.Service;

import com.lingang.api.domain.basic.JsonResult;
import com.lingang.api.domain.basic.Page;
import com.lingang.api.domain.basic.ServiceResult;
import com.lingang.api.domain.basic.StateCodeConstant;
import com.lingang.api.domain.entity.SysNews;
import com.lingang.api.domain.vo.SysNewsVo;
import com.lingang.api.service.SysNewsService;
import com.lingang.core.persistence.reader.SysNewsReaderMapper;
import com.lingang.core.persistence.writer.SysNewsWriterMapper;

@Service("sysNewsService")
public class SysNewsServiceImpl implements SysNewsService {
	@Resource
	private SysNewsReaderMapper sysNewsReaderMapper;
	@Resource
	private SysNewsWriterMapper sysNewsWriterMapper;

	/**
	 * 查询新闻列表
	 */
	@Override
	public ServiceResult<Page<SysNewsVo>> selectSysNewsAll(Integer pageIndex, Integer pageSize) {
		ServiceResult<Page<SysNewsVo>> result = new ServiceResult<Page<SysNewsVo>>();
		Map<String, Object> map = new HashMap<String, Object>();
		int countRecord = sysNewsReaderMapper.selectSysNewsCount();
		Page<SysNewsVo> page = new Page<SysNewsVo>(pageIndex, countRecord, pageSize);
		if (countRecord > 0) {
			map.put("startIndex", page.getCurrentPage()-1);
			map.put("onePageCount", pageSize);
			List<SysNewsVo> list = sysNewsReaderMapper.selectSysNewsAll(map);
			page.setList(list);
		}
		;
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		result.setData(page);
		return result;
	}

	/**
	 * 查询新闻详情
	 * @throws IOException 
	 * @throws JsonMappingException 
	 * @throws JsonGenerationException 
	 */
	@Override
	public ServiceResult<SysNews> selectByPrimaryKey(Integer newsId) {
		ServiceResult<SysNews> result = new ServiceResult<>();
		SysNews news = sysNewsReaderMapper.selectByPrimaryKey(newsId);
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		result.setData(news);
		return result;
	}

	/********* 后台 *********/

	@Override
	public ServiceResult<Page<SysNewsVo>> queryAllByPage(HashMap<String, Object> map) {
		Integer pageIndex = (Integer) map.get("currentPage");
		Integer pageSize = (Integer) map.get("onePageCount");
		ServiceResult<Page<SysNewsVo>> result = new ServiceResult<Page<SysNewsVo>>();
		Integer newsIstop = Integer.parseInt(map.get("newsIstop").toString());
		int countRecord = sysNewsReaderMapper.querySysNewsCount(newsIstop);
		Page<SysNewsVo> page = new Page<SysNewsVo>(pageIndex, countRecord, pageSize);
		if (countRecord > 0) {
			map.put("startIndex", page.getCurrentPage()-1);
			map.put("onePageCount", pageSize);
			List<SysNewsVo> list = sysNewsReaderMapper.queryAllByPage(map);
			int len = 12;
			for (SysNewsVo sysNews : list) {
				String title = sysNews.getNewsTitle();
				title = title.length() < len ? title : title.substring(0, len) + "...";
				sysNews.setNewsTitle(title);
			}
			page.setList(list);
		}
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		result.setData(page);
		return result;
	}
	
	@Override
	public JsonResult queryById(HashMap<String, Object> map){
		Integer newsId = Integer.parseInt(map.get("newsId").toString());
		JsonResult jsonResult = new JsonResult();
		if(newsId!=null&&newsId!=0){
			SysNews news = sysNewsReaderMapper.queryById(newsId);
			jsonResult.setData(news);
			jsonResult.setStateCode(StateCodeConstant.SUCCESS_CODE);
		}else{
			jsonResult.setStateCode("501");
			jsonResult.setMessage("参数异常");
		}
		return jsonResult;
	}

	@Override
	public JsonResult insert(HashMap<String, Object> map) {
		JsonResult jsonResult = new JsonResult();
		SysNews sysNews = new SysNews();
		String title = map.get("newsTitle").toString();
		String author = map.get("newsAuthor").toString();
		String content = map.get("newsContent").toString();
		if(title==null||title.isEmpty()||
				author==null||author.isEmpty()||
				content==null||content.isEmpty()){
			jsonResult.setStateCode("501");
			jsonResult.setMessage("部分内容为空，请完善后再进行提交！");
			return jsonResult;
		}
		Integer newsIsup = Integer.parseInt(map.get("newsIsup").toString());
		Integer imgId = (Integer) map.get("newsImgId");
		sysNews.setNewsTitle(title);
		sysNews.setNewsAuthor(author);
		sysNews.setNewsContent(content);
		sysNews.setNewsState(newsIsup);
		sysNews.setImgId(imgId);
		sysNews.setLookNumber(0);
		sysNews.setShareNumber(0);
		Date date = new Date();
		sysNews.setCreateTime(date);
		sysNews.setUpdateTime(date);
		 sysNewsWriterMapper.sysInsert(sysNews);
		 return jsonResult;
	}

	@Override
	public JsonResult update(SysNews news) {
		JsonResult jsonResult = new JsonResult();
		if(news!=null){
			news.setUpdateTime(new Date());
			Integer success = sysNewsWriterMapper.update(news);
			if(success>0){
				jsonResult.setStateCode(StateCodeConstant.SUCCESS_CODE);
				jsonResult.setMessage("修改成功！");
			}else{
				jsonResult.setStateCode("500");
				jsonResult.setMessage("修改失败，系统异常，请稍后再试！");
			}
		}else{
			jsonResult.setStateCode("501");
			jsonResult.setMessage("参数异常！");
		}
		
		return jsonResult;
	}

	@Override
	public JsonResult del(HashMap<String,Object> map) {
		JsonResult jsonResult = new JsonResult();
		try {
			Integer newsId = Integer.parseInt(map.get("newsId").toString());
			if(newsId!=null&&newsId>0){
				int success = sysNewsWriterMapper.del(newsId);
				if(success>0){
					jsonResult.setStateCode(StateCodeConstant.SUCCESS_CODE);
					jsonResult.setData(success);
				}else{
					jsonResult.setStateCode("502");
					jsonResult.setMessage("删除失败，请稍后再试！");
				}
			}else{
				jsonResult.setStateCode("501");
				jsonResult.setMessage("参数异常！");
			}
		} catch (Exception e) {
			jsonResult.setStateCode("503");
			jsonResult.setMessage("系统异常！");
		}
		return jsonResult;
	}

}
