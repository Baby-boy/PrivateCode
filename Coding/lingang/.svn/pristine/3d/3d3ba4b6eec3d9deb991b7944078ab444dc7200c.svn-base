package com.lingang.core.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.lingang.api.domain.basic.Page;
import com.lingang.api.domain.basic.ServiceResult;
import com.lingang.api.domain.basic.StateCodeConstant;
import com.lingang.api.domain.entity.SysImages;
import com.lingang.api.domain.entity.SysPublic;
import com.lingang.api.domain.para.SysPublicPara;
import com.lingang.api.domain.pfvo.SysPublicPfVo;
import com.lingang.api.domain.vo.SysNewAddMonthStatisticsVo;
import com.lingang.api.domain.vo.SysNewAddQuarterStatisticsVo;
import com.lingang.api.domain.vo.SysNewAddStatisticsVo;
import com.lingang.api.domain.vo.SysPublicVo;
import com.lingang.api.service.SysPublicService;
import com.lingang.core.persistence.reader.SysImagesReaderMapper;
import com.lingang.core.persistence.reader.SysPublicReaderMapper;
import com.lingang.core.persistence.writer.SysImagesWriterMapper;
import com.lingang.core.persistence.writer.SysPublicWriterMapper;

@Service("sysPublicService")
public class SysPublicServiceImpl implements SysPublicService {

	@Resource
	private SysPublicReaderMapper sysPublicReaderMapper;

	@Resource
	private SysPublicWriterMapper sysPublicWriterMapper;
	
	@Resource
	private SysImagesReaderMapper sysImagesReaderMapper;
	
	@Resource
	private SysImagesWriterMapper sysImagesWriterMapper;

	@Override
	public ServiceResult<Page<SysPublicVo>> selectSysPublicVoPageListByRegionIdAndBasicsId(Integer regionId,
			Integer regionTypeId, Integer basicsId, Integer pageIndex, Integer pageSize) {
		ServiceResult<Page<SysPublicVo>> result = new ServiceResult<Page<SysPublicVo>>();
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("regionTypeId", regionTypeId);
		map.put("regionId", regionId);
		map.put("basicsId", basicsId);
		int countRecord = sysPublicReaderMapper.selectSysPublicVoCountByRegionIdAndBasicsId(map);
		Page<SysPublicVo> page = new Page<SysPublicVo>(pageIndex, countRecord, pageSize);
		if (countRecord > 0) {
			map.put("startIndex", page.getCurrentPage() - 1);
			map.put("onePageCount", pageSize);
			List<SysPublicVo> list = sysPublicReaderMapper.selectSysPublicVoPageListByRegionIdAndBasicsId(map);
			page.setList(list);
		}
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		result.setData(page);
		return result;
	}

	@Override
	public ServiceResult<SysPublicVo> selectSysPublicDetailsByPublicId(Integer publicId) {
		ServiceResult<SysPublicVo> result = new ServiceResult<SysPublicVo>();
		int countRecord = sysPublicReaderMapper.selectSysPublicDetailsCountByPublicId(publicId);
		if (countRecord == 1) {
			SysPublicVo sysPublicVo = sysPublicReaderMapper.selectSysPublicDetailsByPublicId(publicId);
			result.setData(sysPublicVo);
		}
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		return result;
	}

	@Override
	public ServiceResult<Page<SysPublicPfVo>> selectSysPublicPfVoPageList(SysPublicPara para) {
		ServiceResult<Page<SysPublicPfVo>> result = new ServiceResult<>();
		// 查询条件
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("publicTitleKeywords", para.getPublicTitleKeywords());
		map.put("regionNameKeywords", para.getRegionNameKeywords());
		map.put("parkNameKeywords", para.getParkNameKeywords());
		map.put("publicState", para.getPublicState());
		int countRecord = sysPublicReaderMapper.selectSysPublicPfVoCount(map);
		Page<SysPublicPfVo> page = new Page<>(para.getCurrentPage(), countRecord, para.getOnePageCount());
		if (countRecord > 0) {
			// 分页条件
			map.put("startIndex", page.getCurrentPage() - 1);
			map.put("onePageCount", page.getOnePageCount());
			List<SysPublicPfVo> list = sysPublicReaderMapper.selectSysPublicPfVoPageList(map);
			page.setList(list);
		}
		result.setData(page);
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		return result;
	}

	@Override
	public ServiceResult<Object> updatePublicDetails(SysPublic sysPublic) {
		ServiceResult<Object> result = new ServiceResult<>();
		int info = sysPublicWriterMapper.updateByPrimaryKeySelective(sysPublic);
		if(sysPublic.getMaxImgId() !=null){
			SysImages maxImg=sysImagesReaderMapper.selectByPrimaryKey(sysPublic.getMaxImgId());
			if(maxImg.getImgState() !=1){
				maxImg.setImgState(1);
				sysImagesWriterMapper.updateByPrimaryKeySelective(maxImg);
			}
		}
		if(sysPublic.getMinImgId() !=null){
			SysImages minImg=sysImagesReaderMapper.selectByPrimaryKey(sysPublic.getMinImgId());
			if(minImg.getImgState() !=1){
				minImg.setImgState(1);
				sysImagesWriterMapper.updateByPrimaryKeySelective(minImg);
			}
		}
		if (info == 1) {
			result.setStateCode(StateCodeConstant.SUCCESS_CODE);
			result.setMessage("更新成功!");
		} else {
			result.setStateCode(StateCodeConstant.ERROR_CODE);
			result.setMessage("更新失败!");
		}
		return result;
	}

	@Override
	public ServiceResult<Object> addPublicDetails(SysPublic sysPublic) {
		ServiceResult<Object> result = new ServiceResult<>();
		int info = sysPublicWriterMapper.insertSelective(sysPublic);
		if (info == 1) {
			result.setStateCode(StateCodeConstant.SUCCESS_CODE);
			result.setMessage("添加成功!");
			if(sysPublic.getMaxImgId() !=null){
				 SysImages maxImg=new SysImages();
				 maxImg.setImgId(sysPublic.getMaxImgId());
				 maxImg.setObjId(sysPublic.getPublicId());
				 maxImg.setImgState(1);
				 sysImagesWriterMapper.updateByPrimaryKeySelective(maxImg);
			 }
			if(sysPublic.getMinImgId() !=null){
				 SysImages minImg=new SysImages();
				 minImg.setImgId(sysPublic.getMinImgId());
				 minImg.setObjId(sysPublic.getPublicId());
				 minImg.setImgState(1);
				 sysImagesWriterMapper.updateByPrimaryKeySelective(minImg);
			 }
		} else {
			result.setStateCode(StateCodeConstant.ERROR_CODE);
			result.setMessage("添加失败!");
		}
		return result;
	}

	@Override
	public ServiceResult<List<SysNewAddStatisticsVo>> selectNewPublicStatisticsList( ) {
		ServiceResult<List<SysNewAddStatisticsVo>> result = new ServiceResult<List<SysNewAddStatisticsVo>>();
		List<SysNewAddStatisticsVo> newAddStatisticsVoList = new ArrayList<SysNewAddStatisticsVo>();
		List<SysNewAddMonthStatisticsVo> monthList = sysPublicReaderMapper.selectNewAddMonth();
		List<SysNewAddQuarterStatisticsVo>  quarterList  = sysPublicReaderMapper.selectNewAddQuarter();
		if(monthList!=null&&monthList.size()>0){          //当按月查询有数据时，按季度也有数据
			SysNewAddStatisticsVo  sysPartnerNewAddStatisticsVo = new SysNewAddStatisticsVo();
			sysPartnerNewAddStatisticsVo.setMonthList(monthList);
			sysPartnerNewAddStatisticsVo.setQuarterList(quarterList);
			newAddStatisticsVoList.add(sysPartnerNewAddStatisticsVo);
		}
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		result.setData(newAddStatisticsVoList);
		return result;
	}

	@Override
	public ServiceResult<SysPublicVo> selectSysPublicDetails(Integer publicId) {
		ServiceResult<SysPublicVo> result = new ServiceResult<SysPublicVo>();
		int countRecord = sysPublicReaderMapper.selectSysPublicDetailsCountByPublicId(publicId);
		if (countRecord == 1) {
			SysPublicVo sysPublicVo = sysPublicReaderMapper.selectSysPublicDetails(publicId);
			result.setData(sysPublicVo);
		}
		result.setStateCode(StateCodeConstant.SUCCESS_CODE);
		return result;
	}

}
